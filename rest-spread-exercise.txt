Rest / Spread Operator Exercises
In this exercise, youâ€™ll refactor some ES5 code into ES2015.

Given this function:
function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}
Refactor it to use the rest operator & an arrow function:

function filterOutOdds(...nums) {
    
    return nums.filter(num => num % 2 === 0)
}


findMin

function findMin(...num) {
    return Math.min(...num)
}



mergeObjects

const mergeObjects = (obj1, obj2) => ({...obj1, ...obj2})


Write a function called doubleAndReturnArgs which accepts an array and a variable number of arguments. The function should return a new array with the original array values and all of additional arguments doubled.

function doubleAndReturnArgs(arr,...num) {
    let double=num.map(a => {
    return a+a 
})

return arr.concat(double);
}



Slice and Dice!

const removeRandom = items => {
    let idx = Math.floor(Math.random() * items.length);
    return [...items.slice(0, idx), ...items.slice(idx + 1)];
  }
  
  
  
  const extend = (array1, array2) => {
    return [...array1, ...array2];
  }
  

  
  const addKeyVal = (obj, key, val) => {
  
    let newObj = { ...obj }
    newObj[key] = val;
    return newObj;
  
  }
  
 
  
  const removeKey = (obj, key) => {
  
    let newObj = { ...obj }
    delete newObj[key]
    return newObj;
  
  }
  
  
  const combine = (obj1, obj2) => {
    return { ...obj1, ...obj2 };
  }
  
  
  const update = (obj, key, val) => {

    let newObj = { ...obj }
    newObj[key] = val;
    return newObj;
  }


